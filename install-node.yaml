# Example playbook for installing node and npm (play 1)
# And deploying a nodejs app on that server (play 2)
---
- name: Install node and npm
  hosts: 123.456.789.000
  tasks:
    - name: Update apt repo and cache
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
    - name: Install nodejs and npm
      apt:
        pkg:
        - nodejs
        - npm
        
- name: Create new linux user
  hosts: 123.456.789.000
  tasks:
    - name: Create linux user
      user:   # module user
      name: nodejsapp
      comment: User for nodejs app
      group: admin

- name: Deploy nodejs app
  hosts: 123.456.789.000
  become: True
  become_user: nodejsapp    # this is how you specify that you want to connect to target with user nodejsapp
  tasks:
    - name: Copy nodejs folder to a server
      copy:         # module copy
        src: /path/to/file/on/local/machine/nodejs-app-1.0.0.tgz
        dst: /path/on/target/machine/nodejs-app-1.0.0.tgz
    - name: Unpack the nodejs tar file
      unarchive:    # module unarchive
        src: /path/on/target/machine/nodejs-app-1.0.0.tgz
        dest: home/nodejsapp/
        remote_src: yes
    - name: Install dependencies
      npm:    # you can also use community.general.npm, module npm
        path: /home/nodejsapp/package
    - name: Start the application
      command:    # module command
        chdir: /home/nodejsapp/package/server
        cmd: node server
      asynch: 1000    # asynch and poll are play's attributes - used to execute play asynchronously
      poll: 0         # so that the playbook doesn't hang because "node server" process is executing
    - name: Ensure app is running
      shell: ps aux | grep node   # module shell, less secure than command but allows full shell syntax
      register: app_status    # register is used to store the result of task execution
    - debug: msg={{app_status.stdout_lines}}  # debug module is used to print out stuff; {{}} is used to reference a variable

# ansible-playbook -i hosts install-node.yaml   to run playbook